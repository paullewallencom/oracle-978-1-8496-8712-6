package oracle.apps.xxhr.emp.server;

import oracle.apps.fnd.framework.OAException;
//import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;


import oracle.jbo.Row;
//import oracle.jbo.RowSetIterator;
import oracle.jbo.Transaction;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmpSocietiesAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public EmpSocietiesAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("oracle.apps.xxhr.emp.server", /* package name */
      "EmpSocietiesAMLocal" /* Configuration Name */);
    }

    /**Container's getter for EmpSocietiesVO1
     */
    public OAViewObjectImpl getEmpSocietiesVO1() {
        return (OAViewObjectImpl)findViewObject("EmpSocietiesVO1");
    }

    /**Container's getter for EmpSocietiesCreateVO1
     */
    public EmpSocietiesCreateVOImpl getEmpSocietiesCreateVO1() {
        return (EmpSocietiesCreateVOImpl)findViewObject("EmpSocietiesCreateVO1");
    }

    public void createNewSociety() {
      // Create an instance of the view object and call it vo
      EmpSocietiesCreateVOImpl vo = getEmpSocietiesCreateVO1();
      
      // We need to do this on a VO that has not been queried before we insert
      // our first row.  We don't want to do it for subsequent inserts.
      if (vo.getFetchedRowCount() == 0) 
      {
        vo.setMaxFetchSize(0);
      }      
      // We are now going to create a record in the view object
      Row row = vo.createRow();

      vo.insertRow(row);
      // Required per OA Framework Model Coding Standard M69
      row.setNewRowState(Row.STATUS_INITIALIZED);
    }

    
    /**
     * createNewSociety method
     */
    public void createNewSociety(String paramPersonId) {
      // Create an instance of the view object and call it vo
      EmpSocietiesCreateVOImpl vo = getEmpSocietiesCreateVO1();
      
      // We need to do this on a VO that has not been queried before we insert
      // our first row.  We don't want to do it for subsequent inserts.
      if (vo.getFetchedRowCount() == 0) 
      {
        vo.setMaxFetchSize(0);
      }      
      // We are now going to create a record in the view object
      Row row = vo.createRow();
      row.setAttribute("PersonId", paramPersonId);
      // Now we will call the standard method to insert the record
      vo.insertRow(row);
      // Required as per OA Framework Model Coding Standard M69
      row.setNewRowState(Row.STATUS_INITIALIZED);
    }

    /**
     * commitTransaction method
     */    
    public void commitTransaction() {
        // Commit the transaction
        getTransaction().commit();
    }  

    /**
     * rollbackSociety method
     */     
    public void rollbackSociety() 
    {
      Transaction txn = getTransaction();
      if (txn.isDirty())
      {
        txn.rollback();
      } 
    } 
    
   
    /**
     * updateSociety method
     */
    public void updateSociety(String paramSocietyId) {
      try
      {
          // Create an instance of the view object and call it vo
          EmpSocietiesCreateVOImpl vo = getEmpSocietiesCreateVO1();
          
          String societiesWhereClause = vo.getWhereClause();
          vo.setWhereClauseParams(null);
          vo.setWhereClause("society_id = :1");
          vo.setWhereClauseParam(0, paramSocietyId);
          vo.executeQuery();
          vo.setWhereClause(null);
          vo.setWhereClause(societiesWhereClause);
      }
      catch(Exception exception1) {
      
         throw OAException.wrapperException(exception1);
      }
      
    }  
    
}